import { eventHandler, createError, getQuery, getRequestURL, sendRedirect } from "h3";
import { withQuery } from "ufo";
import { defu } from "defu";
import { handleMissingConfiguration } from "../utils.js";
import { useRuntimeConfig } from "#imports";
export function defineOAuthSteamEventHandler({ config, onSuccess, onError }) {
  return eventHandler(async (event) => {
    config = defu(config, useRuntimeConfig(event).oauth?.steam, {
      authorizationURL: "https://steamcommunity.com/openid/login"
    });
    const query = getQuery(event);
    if (!config.apiKey) {
      return handleMissingConfiguration(event, "steam", ["apiKey"], onError);
    }
    if (!query["openid.claimed_id"]) {
      const redirectURL = config.redirectURL || getRequestURL(event).href;
      const steamOpenIdParams = {
        "openid.ns": "http://specs.openid.net/auth/2.0",
        "openid.mode": "checkid_setup",
        "openid.return_to": redirectURL,
        "openid.identity": "http://specs.openid.net/auth/2.0/identifier_select",
        "openid.claimed_id": "http://specs.openid.net/auth/2.0/identifier_select"
      };
      return sendRedirect(event, withQuery(config.authorizationURL, steamOpenIdParams));
    }
    const openIdCheck = {
      ns: "http://specs.openid.net/auth/2.0",
      claimed_id: "https://steamcommunity.com/openid/id/",
      identity: "https://steamcommunity.com/openid/id/"
    };
    const idRegex = /^https?:\/\/steamcommunity\.com\/openid\/id\/(\d+)$/;
    const steamIdCheck = idRegex.exec(query["openid.claimed_id"]);
    if (query["openid.op_endpoint"] !== config.authorizationURL || !steamIdCheck || query["openid.ns"] !== openIdCheck.ns || !query["openid.claimed_id"]?.startsWith(openIdCheck.claimed_id) || !query["openid.identity"]?.startsWith(openIdCheck.identity)) {
      const error = createError({
        statusCode: 401,
        message: "Steam login failed: Claimed identity is invalid."
      });
      if (!onError) throw error;
      return onError(event, error);
    }
    const steamId = steamIdCheck[1];
    const user = await $fetch(withQuery("https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v2/", {
      key: config.apiKey,
      steamids: steamId
    }));
    return onSuccess(event, {
      user: user.response.players[0],
      tokens: null
    });
  });
}
