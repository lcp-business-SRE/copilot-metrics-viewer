import { defineComponent, computed, withCtx, renderSlot, unref, createVNode, createTextVNode, toDisplayString, ref, toRef, shallowRef, watchEffect, useSSRContext } from 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/vue/index.mjs';
import { ssrRenderComponent, ssrRenderSlot, ssrInterpolate, ssrRenderStyle } from 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/vue/server-renderer/index.mjs';
import { _ as _export_sfc, ab as useRuntimeConfig, g as genericComponent, b as propsFactory, f as provideTheme, l as useRtl, J as useToggleScope, m as makeThemeProps, e as convertToUnit } from './server.mjs';
import { h as getDisplayName } from '../_/nitro.mjs';
import { u as useHead } from './v4-o0cUfLFJ.mjs';
import { V as VMain, p as createLayout, d as useRender, u as useBackgroundColor, a as useBorder, b as useElevation, c as useRounded, o as useResizeObserver, q as useLayoutItem, r as makeLayoutProps, m as makeComponentProps, h as makeTagProps, i as makeRoundedProps, s as makeLayoutItemProps, j as makeElevationProps, k as makeBorderProps } from './VMain-DMWU_6jf.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/ofetch/dist/node.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/hookable/dist/index.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/unctx/dist/index.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/h3/dist/index.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/vue-router/dist/vue-router.node.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/radix3/dist/index.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/defu/dist/defu.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/ufo/dist/index.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/scule/dist/index.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/destr/dist/index.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/node-mock-http/dist/index.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/klona/dist/index.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/undici/index.js';
import 'node:fs';
import 'node:url';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/pathe/dist/index.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/unstorage/dist/index.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/unstorage/drivers/fs.mjs';
import 'file:///C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/nuxt/dist/core/runtime/nitro/utils/cache-driver.js';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/unstorage/drivers/fs-lite.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/nitropack/node_modules/ohash/dist/index.mjs';
import '../_/renderer.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/vue-bundle-renderer/dist/runtime.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/unhead/dist/server.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/devalue/index.js';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/unhead/dist/utils.mjs';

const makeVAppProps = propsFactory({
  ...makeComponentProps(),
  ...makeLayoutProps({
    fullHeight: true
  }),
  ...makeThemeProps()
}, "VApp");
const VApp = genericComponent()({
  name: "VApp",
  props: makeVAppProps(),
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const theme = provideTheme(props);
    const {
      layoutClasses,
      getLayoutItem,
      items,
      layoutRef
    } = createLayout(props);
    const {
      rtlClasses
    } = useRtl();
    useRender(() => {
      var _a;
      return createVNode("div", {
        "ref": layoutRef,
        "class": ["v-application", theme.themeClasses.value, layoutClasses.value, rtlClasses.value, props.class],
        "style": [props.style]
      }, [createVNode("div", {
        "class": "v-application__wrap"
      }, [(_a = slots.default) == null ? void 0 : _a.call(slots)])]);
    });
    return {
      getLayoutItem,
      items,
      theme
    };
  }
});
const makeVFooterProps = propsFactory({
  app: Boolean,
  color: String,
  height: {
    type: [Number, String],
    default: "auto"
  },
  ...makeBorderProps(),
  ...makeComponentProps(),
  ...makeElevationProps(),
  ...makeLayoutItemProps(),
  ...makeRoundedProps(),
  ...makeTagProps({
    tag: "footer"
  }),
  ...makeThemeProps()
}, "VFooter");
const VFooter = genericComponent()({
  name: "VFooter",
  props: makeVFooterProps(),
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const layoutItemStyles = ref();
    const {
      themeClasses
    } = provideTheme(props);
    const {
      backgroundColorClasses,
      backgroundColorStyles
    } = useBackgroundColor(toRef(props, "color"));
    const {
      borderClasses
    } = useBorder(props);
    const {
      elevationClasses
    } = useElevation(props);
    const {
      roundedClasses
    } = useRounded(props);
    const autoHeight = shallowRef(32);
    const {
      resizeRef
    } = useResizeObserver();
    const height = computed(() => props.height === "auto" ? autoHeight.value : parseInt(props.height, 10));
    useToggleScope(() => props.app, () => {
      const layout = useLayoutItem({
        id: props.name,
        order: computed(() => parseInt(props.order, 10)),
        position: computed(() => "bottom"),
        layoutSize: height,
        elementSize: computed(() => props.height === "auto" ? void 0 : height.value),
        active: computed(() => props.app),
        absolute: toRef(props, "absolute")
      });
      watchEffect(() => {
        layoutItemStyles.value = layout.layoutItemStyles.value;
      });
    });
    useRender(() => createVNode(props.tag, {
      "ref": resizeRef,
      "class": ["v-footer", themeClasses.value, backgroundColorClasses.value, borderClasses.value, elevationClasses.value, roundedClasses.value, props.class],
      "style": [backgroundColorStyles.value, props.app ? layoutItemStyles.value : {
        height: convertToUnit(props.height)
      }, props.style]
    }, slots));
    return {};
  }
});
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "default",
  __ssrInlineRender: true,
  setup(__props) {
    const config = useRuntimeConfig();
    const version = computed(() => config.public.version);
    const githubInfo = getDisplayName(config.public);
    useHead({
      title: githubInfo,
      meta: [
        { name: "description", content: "Copilot Metrics Dashboard" }
      ]
    });
    return (_ctx, _push, _parent, _attrs) => {
      _push(ssrRenderComponent(VApp, _attrs, {
        default: withCtx((_, _push2, _parent2, _scopeId) => {
          if (_push2) {
            _push2(ssrRenderComponent(VMain, null, {
              default: withCtx((_2, _push3, _parent3, _scopeId2) => {
                if (_push3) {
                  ssrRenderSlot(_ctx.$slots, "default", {}, null, _push3, _parent3, _scopeId2);
                } else {
                  return [
                    renderSlot(_ctx.$slots, "default", {}, void 0, true)
                  ];
                }
              }),
              _: 3
            }, _parent2, _scopeId));
            _push2(ssrRenderComponent(VFooter, { class: "bg-indigo-lighten-1 text-center d-flex flex-column fixed-footer" }, {
              default: withCtx((_2, _push3, _parent3, _scopeId2) => {
                if (_push3) {
                  _push3(`<div class="px-4 py-2 text-center w-100" data-v-e4f2f01a${_scopeId2}>${ssrInterpolate((/* @__PURE__ */ new Date()).getFullYear())} — <strong data-v-e4f2f01a${_scopeId2}><a href="https://github.com/github-copilot-resources/copilot-metrics-viewer" target="_blank" rel="noopener noreferrer" style="${ssrRenderStyle({ "color": "inherit" })}" data-v-e4f2f01a${_scopeId2}>Copilot Metrics Viewer</a></strong> — ${ssrInterpolate(unref(version))}</div>`);
                } else {
                  return [
                    createVNode("div", { class: "px-4 py-2 text-center w-100" }, [
                      createTextVNode(toDisplayString((/* @__PURE__ */ new Date()).getFullYear()) + " — ", 1),
                      createVNode("strong", null, [
                        createVNode("a", {
                          href: "https://github.com/github-copilot-resources/copilot-metrics-viewer",
                          target: "_blank",
                          rel: "noopener noreferrer",
                          style: { "color": "inherit" }
                        }, "Copilot Metrics Viewer")
                      ]),
                      createTextVNode(" — " + toDisplayString(unref(version)), 1)
                    ])
                  ];
                }
              }),
              _: 1
            }, _parent2, _scopeId));
          } else {
            return [
              createVNode(VMain, null, {
                default: withCtx(() => [
                  renderSlot(_ctx.$slots, "default", {}, void 0, true)
                ]),
                _: 3
              }),
              createVNode(VFooter, { class: "bg-indigo-lighten-1 text-center d-flex flex-column fixed-footer" }, {
                default: withCtx(() => [
                  createVNode("div", { class: "px-4 py-2 text-center w-100" }, [
                    createTextVNode(toDisplayString((/* @__PURE__ */ new Date()).getFullYear()) + " — ", 1),
                    createVNode("strong", null, [
                      createVNode("a", {
                        href: "https://github.com/github-copilot-resources/copilot-metrics-viewer",
                        target: "_blank",
                        rel: "noopener noreferrer",
                        style: { "color": "inherit" }
                      }, "Copilot Metrics Viewer")
                    ]),
                    createTextVNode(" — " + toDisplayString(unref(version)), 1)
                  ])
                ]),
                _: 1
              })
            ];
          }
        }),
        _: 3
      }, _parent));
    };
  }
});
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("layouts/default.vue");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const _default = /* @__PURE__ */ _export_sfc(_sfc_main, [["__scopeId", "data-v-e4f2f01a"]]);

export { _default as default };
//# sourceMappingURL=default-Jh3U3YFM.mjs.map
