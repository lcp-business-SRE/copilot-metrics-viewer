import { defineEventHandler } from 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/h3/dist/index.mjs';
import { a as useRuntimeConfig } from '../../_/nitro.mjs';
import { readFileSync } from 'node:fs';
import { resolve } from 'node:path';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/ufo/dist/index.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/defu/dist/defu.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/ofetch/dist/node.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/scule/dist/index.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/destr/dist/index.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/hookable/dist/index.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/node-mock-http/dist/index.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/klona/dist/index.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/radix3/dist/index.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/undici/index.js';
import 'node:url';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/pathe/dist/index.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/unstorage/dist/index.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/unstorage/drivers/fs.mjs';
import 'file:///C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/nuxt/dist/core/runtime/nitro/utils/cache-driver.js';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/unstorage/drivers/fs-lite.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/nitropack/node_modules/ohash/dist/index.mjs';

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
class Seat {
  constructor(data) {
    __publicField(this, "login");
    __publicField(this, "id");
    __publicField(this, "team");
    __publicField(this, "created_at");
    __publicField(this, "last_activity_at");
    __publicField(this, "last_activity_editor");
    this.login = data.assignee.login;
    this.id = data.assignee.id;
    this.team = data.assigning_team ? data.assigning_team.name : "";
    this.created_at = data.created_at;
    this.last_activity_at = data.last_activity_at;
    this.last_activity_editor = data.last_activity_editor;
  }
}

const seats = defineEventHandler(async (event) => {
  const logger = console;
  const config = useRuntimeConfig(event);
  let apiUrl = "";
  let mockedDataPath;
  switch (event.context.scope) {
    case "team":
    case "org":
      apiUrl = `https://api.github.com/orgs/${event.context.org}/copilot/billing/seats`;
      mockedDataPath = resolve("public/mock-data/organization_seats_response_sample.json");
      break;
    case "ent":
      apiUrl = `https://api.github.com/enterprises/${event.context.ent}/copilot/billing/seats`;
      mockedDataPath = resolve("public/mock-data/enterprise_seats_response_sample.json");
      break;
    default:
      return new Response("Invalid configuration/parameters for the request", { status: 400 });
  }
  if (config.public.isDataMocked && mockedDataPath) {
    const path = mockedDataPath;
    const data = readFileSync(path, "utf8");
    const dataJson = JSON.parse(data);
    const seatsData2 = dataJson.seats.map((item) => new Seat(item));
    logger.info("Using mocked data");
    return seatsData2;
  }
  if (!event.context.headers.has("Authorization")) {
    logger.error("No Authentication provided");
    return new Response("No Authentication provided", { status: 401 });
  }
  const perPage = 100;
  let page = 1;
  let response;
  logger.info(`Fetching 1st page of seats data from ${apiUrl}`);
  try {
    response = await $fetch(apiUrl, {
      headers: event.context.headers,
      params: {
        per_page: perPage,
        page
      }
    });
  } catch (error) {
    logger.error("Error fetching seats data:", error);
    return new Response("Error fetching seats data. Error: " + error, { status: error.statusCode || 500 });
  }
  let seatsData = response.seats.map((item) => new Seat(item));
  const totalSeats = response.total_seats;
  const totalPages = Math.ceil(totalSeats / perPage);
  for (page = 2; page <= totalPages; page++) {
    response = await $fetch(apiUrl, {
      headers: event.context.headers,
      params: {
        per_page: perPage,
        page
      }
    });
    seatsData = seatsData.concat(response.seats.map((item) => new Seat(item)));
  }
  return seatsData;
});

export { seats as default };
//# sourceMappingURL=seats.mjs.map
