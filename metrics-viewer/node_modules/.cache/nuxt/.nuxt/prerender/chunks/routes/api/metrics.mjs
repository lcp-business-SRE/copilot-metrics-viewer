import { defineEventHandler } from 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/h3/dist/index.mjs';
import { a as useRuntimeConfig } from '../../_/nitro.mjs';
import { readFileSync } from 'node:fs';
import { resolve } from 'node:path';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/ufo/dist/index.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/defu/dist/defu.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/ofetch/dist/node.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/scule/dist/index.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/destr/dist/index.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/hookable/dist/index.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/node-mock-http/dist/index.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/klona/dist/index.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/radix3/dist/index.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/undici/index.js';
import 'node:url';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/pathe/dist/index.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/unstorage/dist/index.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/unstorage/drivers/fs.mjs';
import 'file:///C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/nuxt/dist/core/runtime/nitro/utils/cache-driver.js';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/unstorage/drivers/fs-lite.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/nitropack/node_modules/ohash/dist/index.mjs';

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
class BreakdownData {
  constructor(data) {
    __publicField(this, "language");
    __publicField(this, "editor");
    __publicField(this, "suggestions_count");
    __publicField(this, "acceptances_count");
    __publicField(this, "lines_suggested");
    __publicField(this, "lines_accepted");
    __publicField(this, "active_users");
    __publicField(this, "chat_acceptances");
    __publicField(this, "chat_turns");
    __publicField(this, "active_chat_users");
    this.language = data.language;
    this.editor = data.editor;
    this.suggestions_count = data.suggestions_count;
    this.acceptances_count = data.acceptances_count;
    this.lines_suggested = data.lines_suggested;
    this.lines_accepted = data.lines_accepted;
    this.active_users = data.active_users;
    this.chat_acceptances = data.chat_acceptances;
    this.chat_turns = data.chat_turns;
    this.active_chat_users = data.active_chat_users;
  }
}
class Metrics {
  constructor(data) {
    __publicField(this, "total_suggestions_count");
    __publicField(this, "total_acceptances_count");
    __publicField(this, "total_lines_suggested");
    __publicField(this, "total_lines_accepted");
    __publicField(this, "total_active_users");
    __publicField(this, "total_chat_acceptances");
    __publicField(this, "total_chat_turns");
    __publicField(this, "total_active_chat_users");
    __publicField(this, "acceptance_rate_by_count");
    __publicField(this, "acceptance_rate_by_lines");
    __publicField(this, "day");
    __publicField(this, "breakdown");
    this.total_suggestions_count = data.total_suggestions_count;
    this.total_acceptances_count = data.total_acceptances_count;
    this.total_lines_suggested = data.total_lines_suggested;
    this.total_lines_accepted = data.total_lines_accepted;
    this.total_active_users = data.total_active_users;
    this.total_chat_acceptances = data.total_chat_acceptances;
    this.total_chat_turns = data.total_chat_turns;
    this.total_active_chat_users = data.total_active_chat_users;
    this.day = data.day;
    this.breakdown = data.breakdown.map((item) => new BreakdownData(item));
    this.acceptance_rate_by_count = this.total_suggestions_count !== 0 ? this.total_acceptances_count / this.total_suggestions_count * 100 : 0;
    this.acceptance_rate_by_lines = this.total_lines_suggested !== 0 ? this.total_lines_accepted / this.total_lines_suggested * 100 : 0;
  }
}

const convertToMetrics = (copilotMetrics) => {
  try {
    const usageData = copilotMetrics.map((metric) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _i;
      const breakdown = [];
      (_b = (_a = metric.copilot_ide_code_completions) == null ? void 0 : _a.editors) == null ? void 0 : _b.forEach((editor) => {
        var _a2;
        (_a2 = editor.models) == null ? void 0 : _a2.forEach((model) => {
          var _a3;
          (_a3 = model.languages) == null ? void 0 : _a3.forEach((language) => {
            breakdown.push(new BreakdownData({
              language: language.name,
              editor: editor.name,
              suggestions_count: language.total_code_suggestions,
              acceptances_count: language.total_code_acceptances,
              lines_suggested: language.total_code_lines_suggested,
              lines_accepted: language.total_code_lines_accepted,
              active_users: language.total_engaged_users
            }));
          });
        });
      });
      const totalChatInsertions = ((_d = (_c = metric.copilot_ide_chat) == null ? void 0 : _c.editors) == null ? void 0 : _d.reduce((sum, editor) => {
        var _a2;
        return sum + ((_a2 = editor.models) == null ? void 0 : _a2.reduce((sum2, model) => sum2 + model.total_chat_insertion_events, 0));
      }, 0)) || 0;
      const totalChatCopies = ((_f = (_e = metric.copilot_ide_chat) == null ? void 0 : _e.editors) == null ? void 0 : _f.reduce((sum, editor) => {
        var _a2;
        return sum + ((_a2 = editor.models) == null ? void 0 : _a2.reduce((sum2, model) => sum2 + model.total_chat_copy_events, 0));
      }, 0)) || 0;
      return new Metrics({
        day: metric.date,
        total_suggestions_count: breakdown.reduce((sum, item) => sum + item.suggestions_count, 0),
        total_acceptances_count: breakdown.reduce((sum, item) => sum + item.acceptances_count, 0),
        total_lines_suggested: breakdown.reduce((sum, item) => sum + item.lines_suggested, 0),
        total_lines_accepted: breakdown.reduce((sum, item) => sum + item.lines_accepted, 0),
        total_active_users: metric.total_active_users || 0,
        total_chat_acceptances: totalChatInsertions + totalChatCopies,
        total_chat_turns: ((_h = (_g = metric.copilot_ide_chat) == null ? void 0 : _g.editors) == null ? void 0 : _h.reduce((sum, editor) => {
          var _a2;
          return sum + ((_a2 = editor.models) == null ? void 0 : _a2.reduce((sum2, model) => sum2 + model.total_chats, 0));
        }, 0)) || 0,
        total_active_chat_users: ((_i = metric.copilot_ide_chat) == null ? void 0 : _i.total_engaged_users) || 0,
        breakdown
      });
    });
    return usageData;
  } catch (error) {
    console.error("Error converting metrics to usage format:", error);
    return [];
  }
};

const metrics = defineEventHandler(async (event) => {
  const logger = console;
  const config = useRuntimeConfig(event);
  let apiUrl = "";
  let mockedDataPath;
  switch (event.context.scope) {
    case "team":
      apiUrl = `https://api.github.com/orgs/${event.context.org}/team/${event.context.team}/copilot/metrics`;
      mockedDataPath = resolve("public/mock-data/organization_metrics_response_sample.json");
      break;
    case "org":
      apiUrl = `https://api.github.com/orgs/${event.context.org}/copilot/metrics`;
      mockedDataPath = resolve("public/mock-data/organization_metrics_response_sample.json");
      break;
    case "ent":
      apiUrl = `https://api.github.com/enterprises/${event.context.ent}/copilot/metrics`;
      mockedDataPath = resolve("public/mock-data/enterprise_metrics_response_sample.json");
      break;
    default:
      return new Response("Invalid configuration/parameters for the request", { status: 400 });
  }
  if (config.public.isDataMocked && mockedDataPath) {
    const path = mockedDataPath;
    const data = readFileSync(path, "utf8");
    const dataJson = JSON.parse(data);
    const usageData = ensureCopilotMetrics(dataJson);
    const metricsData = convertToMetrics(usageData);
    logger.info("Using mocked data");
    return { metrics: metricsData, usage: usageData };
  }
  if (!event.context.headers.has("Authorization")) {
    logger.error("No Authentication provided");
    return new Response("No Authentication provided", { status: 401 });
  }
  logger.info(`Fetching metrics data from ${apiUrl}`);
  try {
    const response = await $fetch(apiUrl, {
      headers: event.context.headers
    });
    const usageData = ensureCopilotMetrics(response);
    const metricsData = convertToMetrics(usageData);
    return { metrics: metricsData, usage: usageData };
  } catch (error) {
    logger.error("Error fetching metrics data:", error);
    return new Response("Error fetching metrics data: " + error, { status: error.statusCode || 500 });
  }
});
function ensureCopilotMetrics(data) {
  return data.map((item) => {
    var _a;
    if (!item.copilot_ide_code_completions) {
      item.copilot_ide_code_completions = { editors: [], total_engaged_users: 0, languages: [] };
    }
    (_a = item.copilot_ide_code_completions.editors) == null ? void 0 : _a.forEach((editor) => {
      var _a2;
      (_a2 = editor.models) == null ? void 0 : _a2.forEach((model) => {
        if (!model.languages) {
          model.languages = [];
        }
      });
    });
    return item;
  });
}

export { metrics as default };
//# sourceMappingURL=metrics.mjs.map
