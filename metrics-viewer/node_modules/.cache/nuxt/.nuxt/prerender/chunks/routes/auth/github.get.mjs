import { d as defineOAuthGitHubEventHandler, a as useRuntimeConfig, s as setUserSession } from '../../_/nitro.mjs';
import { sendRedirect } from 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/h3/dist/index.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/ufo/dist/index.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/defu/dist/defu.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/ofetch/dist/node.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/scule/dist/index.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/destr/dist/index.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/hookable/dist/index.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/node-mock-http/dist/index.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/klona/dist/index.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/radix3/dist/index.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/undici/index.js';
import 'node:fs';
import 'node:url';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/pathe/dist/index.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/unstorage/dist/index.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/unstorage/drivers/fs.mjs';
import 'file:///C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/nuxt/dist/core/runtime/nitro/utils/cache-driver.js';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/unstorage/drivers/fs-lite.mjs';
import 'file://C:/work/github/copilot-metrics-viewer/copilot-metrics-viewer/node_modules/nitropack/node_modules/ohash/dist/index.mjs';

const github_get = defineOAuthGitHubEventHandler({
  config: {
    scope: process.env.NUXT_OAUTH_GITHUB_CLIENT_SCOPE ? process.env.NUXT_OAUTH_GITHUB_CLIENT_SCOPE.split(",") : void 0
  },
  async onSuccess(event, { user, tokens }) {
    const config = useRuntimeConfig(event);
    const logger = console;
    await setUserSession(
      event,
      {
        user: {
          githubId: user.id,
          name: user.name,
          avatarUrl: user.avatar_url
        },
        secure: {
          tokens,
          expires_at: new Date(Date.now() + tokens.expires_in * 1e3)
        }
      }
    );
    if (config.public.isPublicApp) {
      try {
        const installationsResponse = await $fetch("https://api.github.com/user/installations", {
          headers: {
            Authorization: `token ${tokens.access_token}`,
            Accept: "application/vnd.github+json",
            "X-GitHub-Api-Version": "2022-11-28"
          }
        });
        const installations = installationsResponse.installations;
        const organizations = installations.map((installation) => installation.account.login);
        await setUserSession(event, {
          organizations
        });
        logger.info("User organizations:", organizations);
        if (organizations.length === 0) {
          console.error("No organizations found for the user.");
          return sendRedirect(event, "/?error=No organizations found for the user.");
        }
        return sendRedirect(event, `/orgs/${organizations[0]}`);
      } catch (error) {
        logger.error("Error fetching installations:", error);
      }
    }
    return sendRedirect(event, "/");
  },
  // Optional, will return a json error and 401 status code by default
  onError(event, error) {
    console.error("GitHub OAuth error:", error);
    return sendRedirect(event, "/");
  }
});

export { github_get as default };
//# sourceMappingURL=github.get.mjs.map
